import requests
from bs4 import BeautifulSoup
import google.generativeai as genai
from dotenv import load_dotenv
import os
import time
import csv

# --- C·∫•u h√¨nh ---
# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# L·∫•y API key v√† c·∫•u h√¨nh cho Gemini
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    print("Ch∆∞a cung c·∫•p GEMINI_API_KEY")
    exit()

genai.configure(api_key=GEMINI_API_KEY)

# Ch·ªçn model ph√π h·ª£p. 'gemini-1.5-flash-latest' nhanh v√† hi·ªáu qu·∫£ cho vi·ªác t√≥m t·∫Øt.
model = genai.GenerativeModel(model_name="gemini-1.5-flash-latest")

# --- C√°c h√†m x·ª≠ l√Ω ---

def crawl_vietnambiz_page(page_url):
    """
    Thu th·∫≠p d·ªØ li·ªáu c√°c b√†i vi·∫øt t·ª´ m·ªôt trang c·ªßa Vietnambiz.
    """
    print(f"üï∑Ô∏è  ƒêang thu th·∫≠p d·ªØ li·ªáu t·ª´: {page_url}")
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}
    try:
        r = requests.get(page_url, headers=headers, timeout=15)
        r.raise_for_status()  # B√°o l·ªói n·∫øu status code kh√¥ng ph·∫£i 2xx
    except requests.exceptions.RequestException as e:
        print(f"L·ªói khi truy c·∫≠p {page_url}: {e}")
        return []

    soup = BeautifulSoup(r.text, "html.parser")
    items = soup.select("h3.title a")
    
    leads = []
    for a in items:
        title = a.get_text(strip=True)
        href = a.get("href", "")
        # ƒê·∫£m b·∫£o URL l√† ho√†n ch·ªânh
        url = href if href.startswith("http") else "https://vietnambiz.vn" + href
        if title and url:
            leads.append({"title": title, "url": url})
            
    return leads

def extract_article_content(article_url):
    """
    Tr√≠ch xu·∫•t n·ªôi dung ch√≠nh c·ªßa m·ªôt b√†i vi·∫øt.
    """
    print(f"üìÑ Tr√≠ch xu·∫•t n·ªôi dung t·ª´: {article_url}")
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        r = requests.get(article_url, headers=headers, timeout=10)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")
        # Selector n√†y c·∫ßn ƒë∆∞·ª£c ki·ªÉm tra ƒë·ªÉ ƒë·∫£m b·∫£o l·∫•y ƒë√∫ng n·ªôi dung
        content_body = soup.select_one("div.vnbcbc-body.vceditor-content")
        if not content_body:
            return ""
        
        paragraphs = content_body.find_all("p")
        # N·ªëi c√°c ƒëo·∫°n vƒÉn b·∫£n, lo·∫°i b·ªè c√°c d√≤ng tr·ªëng
        full_text = "\n".join(p.get_text(strip=True) for p in paragraphs if p.get_text(strip=True))
        return full_text
    except requests.exceptions.RequestException as e:
        print(f"L·ªói l·∫•y n·ªôi dung t·ª´ {article_url}: {e}")
        return ""

def summarize_content_with_retry(text):
    """
    T√≥m t·∫Øt n·ªôi dung b·∫±ng Gemini, c√≥ c∆° ch·∫ø th·ª≠ l·∫°i khi g·∫∑p l·ªói gi·ªõi h·∫°n.
    """
    if not text or len(text.split()) < 50: # Ki·ªÉm tra s·ªë t·ª´ thay v√¨ k√Ω t·ª±
        return "N·ªôi dung kh√¥ng ƒë·ªß d√†i ƒë·ªÉ t√≥m t·∫Øt."

    # S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa
    max_retries = 3
    # Th·ªùi gian ch·ªù ban ƒë·∫ßu (gi√¢y)
    initial_delay = 60

    for attempt in range(max_retries):
        try:
            prompt = f"B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch kinh doanh. H√£y ƒë·ªçc v√† t√≥m t·∫Øt n·ªôi dung sau b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch s√∫c t√≠ch trong kho·∫£ng 3-4 c√¢u, t·∫≠p trung v√†o nh·ªØng th√¥ng tin quan tr·ªçng nh·∫•t:\n\n---\n\n{text}"
            response = model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            # Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói gi·ªõi h·∫°n truy c·∫≠p (429) kh√¥ng
            if "429" in str(e) or "ResourceExhausted" in str(e):
                print(f"‚ùóÔ∏è L·ªói gi·ªõi h·∫°n truy c·∫≠p (429). ƒêang ch·ªù {initial_delay} gi√¢y ƒë·ªÉ th·ª≠ l·∫°i... (L·∫ßn {attempt + 1}/{max_retries})")
                time.sleep(initial_delay)
                # TƒÉng th·ªùi gian ch·ªù cho l·∫ßn th·ª≠ l·∫°i ti·∫øp theo
                initial_delay *= 2
            else:
                print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi Gemini: {e}")
                # Kh√¥ng th·ª≠ l·∫°i v·ªõi c√°c l·ªói kh√°c
                return "L·ªói t√≥m t·∫Øt do m·ªôt v·∫•n ƒë·ªÅ kh√¥ng x√°c ƒë·ªãnh."
    
    print("‚ùå Kh√¥ng th·ªÉ t√≥m t·∫Øt sau nhi·ªÅu l·∫ßn th·ª≠. Vui l√≤ng th·ª≠ l·∫°i sau.")
    return "L·ªói t√≥m t·∫Øt do h·∫øt gi·ªõi h·∫°n truy c·∫≠p."